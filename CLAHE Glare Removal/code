# âœ… Automates glare removal across a dataset.
# âœ… Batch processing with PyTorchâ€™s DataLoader.
# âœ… Enhances contrast & removes bright glare spots.
# âœ… Saves and displays cleaned images.

# Dataset: https://github.com/maesfahani/glaredetection 
# (200 images)

import os
import cv2
import torch
import torchvision.transforms as transforms
from torchvision.utils import save_image
from torch.utils.data import Dataset, DataLoader
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
from tqdm import tqdm

# âœ… Modify these paths
DATASET_PATH = "glaredetection_main/glaredetection-main/RGB"
OUTPUT_PATH = "glare_free_results"  # Where cleaned images will be saved

# âœ… Ensure output directory exists
os.makedirs(OUTPUT_PATH, exist_ok=True)

# ðŸ”¹ Define image transformations (Normalization & Resize)
data_transforms = transforms.Compose([
    transforms.Resize((256, 256)),  # Resize for uniformity
    transforms.ToTensor()           # Convert to Tensor
])

# ðŸ”¹ Custom Dataset Class for Glare Removal
class GlareDataset(Dataset):
    def __init__(self, root_dir, transform=None):
        self.root_dir = root_dir
        self.transform = transform
        self.image_paths = []

        # âœ… Traverse all subdirectories
        for subdir in os.listdir(root_dir):
            subdir_path = os.path.join(root_dir, subdir)
            if os.path.isdir(subdir_path):
                img_folder = os.path.join(subdir_path, "images")
                if os.path.exists(img_folder):
                    for img_name in os.listdir(img_folder):
                        if img_name.endswith((".jpg", ".png", ".jpeg")):
                            self.image_paths.append(os.path.join(img_folder, img_name))

    def __len__(self):
        return len(self.image_paths)

    def __getitem__(self, idx):
        img_path = self.image_paths[idx]
        image = Image.open(img_path).convert("RGB")  # Open image

        if self.transform:
            image = self.transform(image)  # Apply transformations

        return image, img_path  # Return image + path for saving

# âœ… Load Dataset & Dataloader
dataset = GlareDataset(DATASET_PATH, transform=data_transforms)
dataloader = DataLoader(dataset, batch_size=1, shuffle=False)

# ðŸ”¹ Glare Removal Function (OpenCV)
def remove_glare(img_path):
    """Removes glare using CLAHE, gamma correction, and inpainting."""
    img = cv2.imread(img_path)
    img = cv2.resize(img, (256, 256))  # Resize

    # Convert to LAB color space
    lab = cv2.cvtColor(img, cv2.COLOR_BGR2LAB)
    
    # Apply CLAHE (Contrast Limited Adaptive Histogram Equalization)
    l, a, b = cv2.split(lab)
    clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8,8))
    l = clahe.apply(l)
    lab = cv2.merge((l, a, b))
    
    # Convert back to BGR
    img_clahe = cv2.cvtColor(lab, cv2.COLOR_LAB2BGR)

    # Convert to Grayscale
    gray = cv2.cvtColor(img_clahe, cv2.COLOR_BGR2GRAY)

    # Apply threshold to detect glare (bright spots)
    _, mask = cv2.threshold(gray, 220, 255, cv2.THRESH_BINARY)

    # Inpaint glare regions
    inpainted = cv2.inpaint(img_clahe, mask, inpaintRadius=7, flags=cv2.INPAINT_TELEA)

    return inpainted

# ðŸ”¹ Process Each Image
for _, img_path in tqdm(dataloader, desc="Processing Images"):
    img_path = img_path[0]  # Get image path from tensor

    # ðŸ”¥ Remove glare
    glare_free_img = remove_glare(img_path)

    # âœ… Save Output Image
    save_name = os.path.join(OUTPUT_PATH, os.path.basename(img_path))
    cv2.imwrite(save_name, glare_free_img)

    # âœ… Display (Optional)
    plt.figure(figsize=(10, 5))
    
    # Original Image
    original = cv2.imread(img_path)
    original = cv2.resize(original, (256, 256))
    
    plt.subplot(1, 2, 1)
    plt.imshow(cv2.cvtColor(original, cv2.COLOR_BGR2RGB))
    plt.title("Glared Image")
    
    # Glare-Free Image
    plt.subplot(1, 2, 2)
    plt.imshow(cv2.cvtColor(glare_free_img, cv2.COLOR_BGR2RGB))
    plt.title("Glare-Free Image")

    plt.show()

print(f"âœ… Glare-free images saved in: {OUTPUT_PATH}")
